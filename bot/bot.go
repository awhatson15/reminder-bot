package bot

import (
	"fmt"
	"log"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/yourusername/reminder-bot/db"
	"github.com/yourusername/reminder-bot/models"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç Telegram –±–æ—Ç–∞
type Bot struct {
	API         *tgbotapi.BotAPI
	DB          *db.DB
	UserStates  map[int64]*models.UserState
	statesMutex sync.RWMutex
}

// NewBot —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
func NewBot(token string, database *db.DB) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–æ—Ç–∞: %w", err)
	}

	return &Bot{
		API:        api,
		DB:         database,
		UserStates: make(map[int64]*models.UserState),
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
func (b *Bot) Start() {
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", b.API.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.API.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			go b.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			go b.handleCallbackQuery(update.CallbackQuery)
		}
	}
}

// GetUserState –ø–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) GetUserState(userID int64) *models.UserState {
	b.statesMutex.RLock()
	state, exists := b.UserStates[userID]
	b.statesMutex.RUnlock()

	if !exists {
		state = &models.UserState{
			State:       models.StateDefault,
			CurrentData: make(map[string]interface{}),
		}
		b.statesMutex.Lock()
		b.UserStates[userID] = state
		b.statesMutex.Unlock()
	}

	return state
}

// SetUserState —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) SetUserState(userID int64, state string) {
	b.statesMutex.Lock()
	defer b.statesMutex.Unlock()

	_, exists := b.UserStates[userID]
	if !exists {
		b.UserStates[userID] = &models.UserState{
			State:       state,
			CurrentData: make(map[string]interface{}),
		}
	} else {
		b.UserStates[userID].State = state
	}
}

// ResetUserState —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) ResetUserState(userID int64) {
	b.statesMutex.Lock()
	defer b.statesMutex.Unlock()

	b.UserStates[userID] = &models.UserState{
		State:       models.StateDefault,
		CurrentData: make(map[string]interface{}),
	}
}

// SaveUserData —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *Bot) SaveUserData(userID int64, key string, value interface{}) {
	b.statesMutex.Lock()
	defer b.statesMutex.Unlock()

	state, exists := b.UserStates[userID]
	if !exists {
		state = &models.UserState{
			State:       models.StateDefault,
			CurrentData: make(map[string]interface{}),
		}
		b.UserStates[userID] = state
	}

	state.CurrentData[key] = value
}

// SendMainMenu –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
func (b *Bot) SendMainMenu(chatID int64) error {
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", "add_event"),
			tgbotapi.NewInlineKeyboardButtonData("–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è", "list_events"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "settings"),
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–º–æ—â—å", "help"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")
	msg.ReplyMarkup = keyboard

	_, err := b.API.Send(msg)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–Ω—é: %w", err)
	}

	return nil
}

// SendNotification –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Å–æ–±—ã—Ç–∏–∏
func (b *Bot) SendNotification(user *models.User, event *models.Event, daysLeft int) error {
	var messageText string
	
	if daysLeft == 0 {
		// –°–æ–±—ã—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è
		messageText = fmt.Sprintf("üéâ –°–µ–≥–æ–¥–Ω—è: %s (%s)\n%s", 
			event.Title, event.Type, event.Description)
	} else {
		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ N –¥–Ω–µ–π
		messageText = fmt.Sprintf("üîî –ß–µ—Ä–µ–∑ %d –¥–Ω–µ–π: %s (%s)\n%s", 
			daysLeft, event.Title, event.Type, event.Description)
	}
	
	msg := tgbotapi.NewMessage(user.TelegramID, messageText)
	_, err := b.API.Send(msg)
	
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %w", err)
	}
	
	return nil
}

// CheckAndSendNotifications –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
func (b *Bot) CheckAndSendNotifications() error {
	// –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Å–æ–±—ã—Ç–∏—è
	events, err := b.DB.GetUpcomingEvents()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π: %w", err)
	}
	
	for _, event := range events {
		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user, err := b.DB.GetUserByTelegramID(event.UserID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", event.UserID, err)
			continue
		}
		
		if user == nil {
			continue
		}
		
		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–æ–±—ã—Ç–∏—è
		daysLeft, err := utils.DaysUntilEvent(event.EventDate)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è %d: %v", event.ID, err)
			continue
		}
		
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–æ—Å—å —Å—Ç–æ–ª—å–∫–æ –¥–Ω–µ–π, —Å–∫–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
		// –∏–ª–∏ –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å–µ–≥–æ–¥–Ω—è
		if daysLeft == event.NotifyDays || daysLeft == 0 {
			err = b.SendNotification(user, event, daysLeft)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è %d: %v", event.ID, err)
			}
		}
	}
	
	return nil
}