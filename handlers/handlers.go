package handlers

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/awhatson15/reminder-bot/bot"
	"github.com/awhatson15/reminder-bot/models"
	"github.com/awhatson15/reminder-bot/utils"
)

// HandleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *bot.Bot) handleMessage(message *tgbotapi.Message) {
	if message.IsCommand() {
		b.handleCommand(message)
		return
	}

	userID := message.From.ID
	chatID := message.Chat.ID
	userState := b.GetUserState(userID)

	switch userState.State {
	case models.StateAddEventTitle:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
		b.SaveUserData(userID, "title", message.Text)
		b.SetUserState(userID, models.StateAddEventType)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π
		keyboard := tgbotapi.NewInlineKeyboardMarkup()
		for _, eventType := range models.EventTypes {
			row := tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData(eventType, "type:"+eventType),
			)
			keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
		}

		msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:")
		msg.ReplyMarkup = keyboard
		b.API.Send(msg)

	case models.StateAddEventDate:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏—è
		dateStr := message.Text
		formattedDate, err := utils.FormatDate(dateStr)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå %s. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", err))
			b.API.Send(msg)
			return
		}

		b.SaveUserData(userID, "event_date", formattedDate)
		b.SetUserState(userID, models.StateAddEventNotify)

		msg := tgbotapi.NewMessage(chatID, "–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30):")
		b.API.Send(msg)

	case models.StateAddEventNotify:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–Ω–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
		daysStr := message.Text
		days, err := strconv.Atoi(daysStr)
		if err != nil || days < 1 || days > 30 {
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30:")
			b.API.Send(msg)
			return
		}

		b.SaveUserData(userID, "notify_days", days)
		b.SetUserState(userID, models.StateAddEventDesc)

		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):")
		b.API.Send(msg)

	case models.StateAddEventDesc:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
		description := message.Text
		if message.Text == "/skip" {
			description = ""
		}

		b.SaveUserData(userID, "description", description)

		// –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –ë–î
		userData := userState.CurrentData
		user, err := b.DB.GetUserByTelegramID(userID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
			b.API.Send(msg)
			b.ResetUserState(userID)
			return
		}

		event := &models.Event{
			UserID:      user.ID,
			Title:       userData["title"].(string),
			Type:        userData["type"].(string),
			EventDate:   userData["event_date"].(string),
			NotifyDays:  userData["notify_days"].(int),
			Description: description,
		}

		eventID, err := b.DB.CreateEvent(event)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: %v", err)
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
			b.API.Send(msg)
			b.ResetUserState(userID)
			return
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		displayDate := utils.FormatDisplayDate(event.EventDate)

		successMsg := fmt.Sprintf("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n\n"+
			"üî§ –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n"+
			"üè∑ –¢–∏–ø: %s\n"+
			"üìÖ –î–∞—Ç–∞: %s\n"+
			"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞ %d –¥–Ω–µ–π\n",
			event.Title, event.Type, displayDate, event.NotifyDays)

		if event.Description != "" {
			successMsg += fmt.Sprintf("üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s\n", event.Description)
		}

		msg := tgbotapi.NewMessage(chatID, successMsg)
		b.API.Send(msg)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		b.ResetUserState(userID)
		b.SendMainMenu(chatID)

	case models.StateSetNotifyTime:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
		timeStr := message.Text
		formattedTime, err := utils.ValidateTime(timeStr)
		if err != nil {
			msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå %s. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:", err))
			b.API.Send(msg)
			return
		}

		user, err := b.DB.GetUserByTelegramID(userID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
			b.API.Send(msg)
			b.ResetUserState(userID)
			return
		}

		err = b.DB.SetUserNotificationTime(user.ID, formattedTime)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %v", err)
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
			b.API.Send(msg)
			b.ResetUserState(userID)
			return
		}

		msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚úÖ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ %s", formattedTime))
		b.API.Send(msg)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		b.ResetUserState(userID)
		b.SendMainMenu(chatID)

	case models.StateEditEventValue:
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è —Å–æ–±—ã—Ç–∏—è
		field := userState.CurrentData["field"].(string)
		eventID := userState.CurrentData["event_id"].(int64)

		event, err := b.DB.GetEventByID(eventID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: %v", err)
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
			b.API.Send(msg)
			b.ResetUserState(userID)
			return
		}

		switch field {
		case "title":
			event.Title = message.Text

		case "date":
			formattedDate, err := utils.FormatDate(message.Text)
			if err != nil {
				msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå %s. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", err))
				b.API.Send(msg)
				return
			}
			event.EventDate = formattedDate

		case "notify_days":
			days, err := strconv.Atoi(message.Text)
			if err != nil || days < 1 || days > 30 {
				msg := tgbotapi.NewMessage(chatID, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30:")
				b.API.Send(msg)
				return
			}
			event.NotifyDays = days

		case "description":
			event.Description = message.Text
		}

		err = b.DB.UpdateEvent(event)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: %v", err)
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
			b.API.Send(msg)
			b.ResetUserState(userID)
			return
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		displayDate := utils.FormatDisplayDate(event.EventDate)

		successMsg := fmt.Sprintf("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"+
			"üî§ –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n"+
			"üè∑ –¢–∏–ø: %s\n"+
			"üìÖ –î–∞—Ç–∞: %s\n"+
			"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞ %d –¥–Ω–µ–π\n",
			event.Title, event.Type, displayDate, event.NotifyDays)

		if event.Description != "" {
			successMsg += fmt.Sprintf("üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s\n", event.Description)
		}

		msg := tgbotapi.NewMessage(chatID, successMsg)
		b.API.Send(msg)

		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		b.ResetUserState(userID)
		b.SendMainMenu(chatID)

	default:
		// –í –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		b.ResetUserState(userID)
		b.SendMainMenu(chatID)
	}
}

// HandleCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
func (b *bot.Bot) handleCommand(message *tgbotapi.Message) {
	userID := message.From.ID
	chatID := message.Chat.ID

	switch message.Command() {
	case "start":
		// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
		_, err := b.DB.CreateUser(
			userID,
			message.From.UserName,
			message.From.FirstName,
			message.From.LastName,
		)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		}

		// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		welcomeMsg := fmt.Sprintf(
			"üëã –ü—Ä–∏–≤–µ—Ç, %s!\n\n"+
				"–Ø –±–æ—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö. "+
				"–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –Ω–µ –∑–∞–±—É–¥–µ—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –¥—Ä—É–∑–µ–π –∏ –±–ª–∏–∑–∫–∏—Ö —Å –ø—Ä–∞–∑–¥–Ω–∏–∫–∞–º–∏.\n\n"+
				"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–∏–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:",
			message.From.FirstName,
		)
		msg := tgbotapi.NewMessage(chatID, welcomeMsg)
		b.API.Send(msg)

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		b.ResetUserState(userID)
		b.SendMainMenu(chatID)

	case "help":
		helpMsg := "ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*\n\n" +
			"/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
			"/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n" +
			"/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n" +
			"/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–æ–±—ã—Ç–∏–π\n" +
			"/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n" +
			"–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."

		msg := tgbotapi.NewMessage(chatID, helpMsg)
		msg.ParseMode = "Markdown"
		b.API.Send(msg)

	case "add":
		// –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
		b.SetUserState(userID, models.StateAddEventTitle)
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
		b.API.Send(msg)

	case "list":
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		b.sendEventsList(chatID, userID)

	case "settings":
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
		b.showSettings(chatID, userID)

	case "skip":
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–ø—É—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è)
		userState := b.GetUserState(userID)
		if userState.State == models.StateAddEventDesc {
			b.handleMessage(&tgbotapi.Message{
				From:    message.From,
				Chat:    message.Chat,
				Text:    "",
				MessageID: message.MessageID,
			})
		}

	default:
		msg := tgbotapi.NewMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
		b.API.Send(msg)
	}
}

// HandleCallbackQuery –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
func (b *bot.Bot) handleCallbackQuery(callback *tgbotapi.CallbackQuery) {
	userID := callback.From.ID
	chatID := callback.Message.Chat.ID
	data := callback.Data
	userState := b.GetUserState(userID)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
	b.API.Request(tgbotapi.NewCallback(callback.ID, ""))

	switch {
	case data == "add_event":
		// –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
		b.SetUserState(userID, models.StateAddEventTitle)
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
		b.API.Send(msg)

	case data == "list_events":
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		b.sendEventsList(chatID, userID)

	case data == "settings":
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
		b.showSettings(chatID, userID)

	case data == "help":
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
		helpMsg := "ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*\n\n" +
			"/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n" +
			"/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º\n" +
			"/add - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ\n" +
			"/list - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–æ–±—ã—Ç–∏–π\n" +
			"/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n" +
			"–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."

		msg := tgbotapi.NewMessage(chatID, helpMsg)
		msg.ParseMode = "Markdown"
		b.API.Send(msg)

	case data == "back_to_menu":
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		b.ResetUserState(userID)
		b.SendMainMenu(chatID)

	case data == "set_notify_time":
		// –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
		b.SetUserState(userID, models.StateSetNotifyTime)
		msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):")
		b.API.Send(msg)

	case strings.HasPrefix(data, "type:"):
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
		if userState.State == models.StateAddEventType {
			eventType := strings.TrimPrefix(data, "type:")
			b.SaveUserData(userID, "type", eventType)
			b.SetUserState(userID, models.StateAddEventDate)

			msg := tgbotapi.NewMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
			b.API.Send(msg)
		}

	case strings.HasPrefix(data, "event:"):
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
		eventIDStr := strings.TrimPrefix(data, "event:")
		eventID, err := strconv.ParseInt(eventIDStr, 10, 64)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ID —Å–æ–±—ã—Ç–∏—è: %v", err)
			return
		}

		event, err := b.DB.GetEventByID(eventID)
		if err != nil || event == nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: %v", err)
			msg := tgbotapi.NewMessage(chatID, "‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
			b.API.Send(msg)
			return
		}

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		displayDate := utils.FormatDisplayDate(event.EventDate)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—ã—Ç–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		eventMsg := fmt.Sprintf("üóì *%s*\n\n"+
			"üè∑ –¢–∏–ø: %s\n"+
			"üìÖ –î–∞—Ç–∞: %s\n"+
			"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞ %d –¥–Ω–µ–π\n",
			event.Title, event.Type, displayDate, event.NotifyDays)

		if event.Description != "" {
			eventMsg += fmt.Sprintf("üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s\n", event.Description)
		}

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", fmt.Sprintf("edit:%d", event.ID)),
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("delete:%d", event.ID)),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", "list_events"),
				tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu"),
			),
		)

		msg := tgbotapi.NewMessage(chatID, eventMsg)
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = keyboard
		b.API.Send(msg)

	case strings.HasPrefix(data, "edit:"):
		// –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
		eventIDStr := strings.TrimPrefix(data, "edit:")
		eventID, err := strconv.ParseInt(eventIDStr, 10, 64)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ID —Å–æ–±—ã—Ç–∏—è: %v", err)
			return
		}

		event, err := b.DB.GetEventByID(eventID)
		if err != nil || event == nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: %v", err)
			msg := tgbotapi.NewMessage(chatID, "‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
			b.API.Send(msg)
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–±—ã—Ç–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		b.SaveUserData(userID, "event_id", eventID)
		b.SetUserState(userID, models.StateEditEventField)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üî§ –ù–∞–∑–≤–∞–Ω–∏–µ", "edit_field:title"),
				tgbotapi.NewInlineKeyboardButtonData("üè∑ –¢–∏–ø", "edit_field:type"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìÖ –î–∞—Ç–∞", "edit_field:date"),
				tgbotapi.NewInlineKeyboardButtonData("üîî –î–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", "edit_field:notify_days"),
			),
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üìù –û–ø–∏—Å–∞–Ω–∏–µ", "edit_field:description"),
				tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", fmt.Sprintf("event:%d", eventID)),
			),
		)

		msg := tgbotapi.NewMessage(chatID, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?")
		msg.ReplyMarkup = keyboard
		b.API.Send(msg)

	case strings.HasPrefix(data, "edit_field:"):
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		field := strings.TrimPrefix(data, "edit_field:")
		b.SaveUserData(userID, "field", field)
		b.SetUserState(userID, models.StateEditEventValue)

		var promptMsg string
		switch field {
		case "title":
			promptMsg = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:"
		case "type":
			// –î–ª—è —Ç–∏–ø–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
			keyboard := tgbotapi.NewInlineKeyboardMarkup()
			for _, eventType := range models.EventTypes {
				row := tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData(eventType, "set_type:"+eventType),
				)
				keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
			}

			msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è:")
			msg.ReplyMarkup = keyboard
			b.API.Send(msg)
			return
		case "date":
			promptMsg = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
		case "notify_days":
			promptMsg = "–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? (–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30):"
		case "description":
			promptMsg = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:"
		default:
			promptMsg = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
		}

		msg := tgbotapi.NewMessage(chatID, promptMsg)
		b.API.Send(msg)

	case strings.HasPrefix(data, "set_type:"):
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
		if userState.State == models.StateEditEventValue && userState.CurrentData["field"] == "type" {
			newType := strings.TrimPrefix(data, "set_type:")
			eventID := userState.CurrentData["event_id"].(int64)

			event, err := b.DB.GetEventByID(eventID)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: %v", err)
				msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
				b.API.Send(msg)
				b.ResetUserState(userID)
				return
			}

			event.Type = newType
			err = b.DB.UpdateEvent(event)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: %v", err)
				msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
				b.API.Send(msg)
				b.ResetUserState(userID)
				return
			}

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
			displayDate := utils.FormatDisplayDate(event.EventDate)

			successMsg := fmt.Sprintf("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"+
				"üî§ –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n"+
				"üè∑ –¢–∏–ø: %s\n"+
				"üìÖ –î–∞—Ç–∞: %s\n"+
				"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞ %d –¥–Ω–µ–π\n",
				event.Title, event.Type, displayDate, event.NotifyDays)

			if event.Description != "" {
				successMsg += fmt.Sprintf("üìù –û–ø–∏—Å–∞–Ω–∏–µ: %s\n", event.Description)
			}

			msg := tgbotapi.NewMessage(chatID, successMsg)
			b.API.Send(msg)

			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
			b.ResetUserState(userID)
			b.SendMainMenu(chatID)
		}

	case strings.HasPrefix(data, "delete:"):
		// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
		eventIDStr := strings.TrimPrefix(data, "delete:")
		eventID, err := strconv.ParseInt(eventIDStr, 10, 64)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ID —Å–æ–±—ã—Ç–∏—è: %v", err)
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–±—ã—Ç–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
		b.SaveUserData(userID, "delete_event_id", eventID)

		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", fmt.Sprintf("confirm_delete:%d", eventID)),
				tgbotapi.NewInlineKeyboardButtonData("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", fmt.Sprintf("event:%d", eventID)),
			),
		)

		msg := tgbotapi.NewMessage(chatID, "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.")
		msg.ReplyMarkup = keyboard
		b.API.Send(msg)

	case strings.HasPrefix(data, "confirm_delete:"):
		// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
		eventIDStr := strings.TrimPrefix(data, "confirm_delete:")
		eventID, err := strconv.ParseInt(eventIDStr, 10, 64)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ ID —Å–æ–±—ã—Ç–∏—è: %v", err)
			return
		}

		err = b.DB.DeleteEvent(eventID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: %v", err)
			msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
			b.API.Send(msg)
			return
		}

		msg := tgbotapi.NewMessage(chatID, "‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
		b.API.Send(msg)

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
		b.sendEventsList(chatID, userID)
	}
}

// sendEventsList –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (b *bot.Bot) sendEventsList(chatID, userID int64) {
	user, err := b.DB.GetUserByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π.")
		b.API.Send(msg)
		return
	}

	events, err := b.DB.GetEventsByUserID(user.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: %v", err)
		msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π.")
		b.API.Send(msg)
		return
	}

	if len(events) == 0 {
		// –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", "add_event"),
				tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu"),
			),
		)

		msg := tgbotapi.NewMessage(chatID, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ!")
		msg.ReplyMarkup = keyboard
		b.API.Send(msg)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
	keyboard := tgbotapi.NewInlineKeyboardMarkup()
	for _, event := range events {
		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
		displayDate := utils.FormatDisplayDate(event.EventDate)
		
		// –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–Ω–∏ –¥–æ —Å–æ–±—ã—Ç–∏—è
		daysLeft, err := utils.DaysUntilEvent(event.EventDate)
		daysInfo := ""
		if err == nil {
			if daysLeft == 0 {
				daysInfo = " (—Å–µ–≥–æ–¥–Ω—è!)"
			} else {
				daysInfo = fmt.Sprintf(" (—á–µ—Ä–µ–∑ %d –¥–Ω.)", daysLeft)
			}
		}
		
		buttonText := fmt.Sprintf("%s - %s%s", event.Title, displayDate, daysInfo)
		row := tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(buttonText, fmt.Sprintf("event:%d", event.ID)),
		)
		keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, row)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
	keyboard.InlineKeyboard = append(keyboard.InlineKeyboard, 
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", "add_event"),
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "üóì –í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:")
	msg.ReplyMarkup = keyboard
	b.API.Send(msg)
}

// showSettings –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
func (b *bot.Bot) showSettings(chatID, userID int64) {
	user, err := b.DB.GetUserByTelegramID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		msg := tgbotapi.NewMessage(chatID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
		b.API.Send(msg)
		return
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", "set_notify_time"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_menu"),
		),
	)

	settingsMsg := fmt.Sprintf("‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*\n\n"+
		"‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: *%s*\n\n"+
		"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
		user.NotificationTime)

	msg := tgbotapi.NewMessage(chatID, settingsMsg)
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	b.API.Send(msg)
}
